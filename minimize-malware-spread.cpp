#include <bits/stdc++.h>
// kbx2157
using namespace std;
// https://leetcode.com/problems/minimize-malware-spread

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int N = graph.size();
        
        int color = 0;
        
        vector<int> colors(N,-1);
        
        for (int i = 0;i<N;i++){
            if (colors[i]==-1){
                dfs(graph,colors,i,color++);
            }
        }
        vector<int> size(color,0);
        for (int color:colors){
            // cout<<color<<" ";
            size[color]++;
        }
        // cout<<endl<<"HERE2";
        vector<int> count(color,0);
        
        for (int node:initial){
            // cout<<node<<endl;

            count[colors[node]]++;
        }
        // cout<<"HERE"<<endl;

        
        int ans = INT_MAX;
        
        for (int node:initial){
            // cout<<node<<" ";
            int c = colors[node];
            // cout<<node<<" "<<count[c]<<" "<<size[c]<<" "<<ans<<endl;
            if (count[c]==1){
                if (ans == INT_MAX) ans = node;
                else if (size[c]>size[colors[ans]]) ans = node;
                else if (size[c]==size[colors[ans]] && node<ans) ans = node;
            }
        }
        // cout<<"HERE";
        if (ans == INT_MAX){
            for (int node:initial)
                ans = min(ans,node);
        }
        return ans;
    }
    
    void dfs(vector<vector<int>> &graph,vector<int> &colors, int node, int color ){
        colors[node] = color;
        
        for (int i = 0;i<graph.size();i++){
            if (graph[node][i] && colors[i]==-1) dfs(graph,colors,i,color);
        }
    }
};